syntax = "proto3";

package io.linkerd.proxy.profile;

option go_package = "github.com/linkerd/linkerd2-proxy-api/go/profile";

import "google/protobuf/duration.proto";

import "http_types.proto";
import "destination.proto";

service Profile {
  // Given a destination, return that service's profile and send an update
  // whenever it changes.
  rpc Get(destination.GetDestination) returns (stream ServiceProfile) {}
}

message ServiceProfile {
  // A list of request classes, each with a RequestMatch.  If a request matches
  // more than one RequestClass, the first match wins.
  repeated RequestClass request_classes = 1;
  // Retry budget describes how much additional load is acceptable to send to
  // this service from retries.
  RetryBudget retry_budget = 2;
  google.protobuf.Duration default_retry_timeout = 3;
}

message RetryBudget {
  // The maximum ratio of retries to non-retry requests.  For example if this
  // value is 0.2 then the number of retries is at most 20% of the number of
  // non-retry requests.  This can be thought of as the amount of extra load
  // added by retries (e.g. 20% extra load).
  float max_retry_ratio = 1;
  // The duration over which the retry budget is calculated.  For example, if
  // this value is 10 seconds, then in the past 10 seconds it must be true that:
  //
  // #retries <= #requests*max_retry_ratio + additional_retries_per_second*10
  //
  // Increasing the duration over which this is calculated allows for larger
  // bursts of retries.
  google.protobuf.Duration ttl = 2;
  // This amount of retries per second are allowed in addition to the ones
  // allowed by the max_retry_ratio.  This is to allow retries to happen even
  // when the request rate is low.
  uint32 additional_retries_per_second = 3;
}

message RequestClass {
  // This class contains requests which match this condition.
  RequestMatch condition = 1;
  // A list of response classes for this request class.  If a response matches
  // more than one ResponseClass, the first match wins.  If a response does not
  // match any ResponseClasses, it is considered to be a successful response.
  repeated ResponseClass response_classes = 2;
  // After this duration has elapsed since the initial request, no more retries
  // will be attempted.  If unspecified, this defaults to the service profile's
  // default_retry_timeout.
  google.protobuf.Duration retry_timeout = 3;
}

message ResponseClass {
  // This class contains responses which match this condition.
  ResponseMatch condition = 1;
  // If responses in this class should be considered failures.
  bool is_failure = 2;
  // If responses in this class are safe to retry.
  bool is_retryable = 3;
}

message RequestMatch {
  message Seq {
    repeated RequestMatch matches = 1;
  }

  oneof match {
    Seq all = 1;
    Seq any = 2;
    RequestMatch not = 3;

    // Match if the request path matches this regex.
    string path  = 4;
    http_types.HttpMethod method = 5;
    //TODO: match on arbitrary header
  }
}

message ResponseMatch {
  message Seq {
    repeated ResponseMatch matches = 1;
  }

  oneof match {
    Seq all = 1;
    Seq any = 2;
    ResponseMatch not = 3;

    HttpStatusRange status  = 4;
    //TODO: match on arbitrary header or trailer
  }
}

// If either a minimum or maximum is not specified, the range is considered to be
// over a discrete value.
message HttpStatusRange {
  oneof match {
    // Minimum matching http status code (inclusive), if specified.
    uint32 min = 1;
    // Maximum matching http status code (inclusive), if specified.
    uint32 max = 2;
  }
}
